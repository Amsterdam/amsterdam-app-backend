# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- develop-ccc

pool:
  vmImage: ubuntu-latest # This is the default if you don't specify a pool or vmImage.

strategy:
  matrix:
    Python38:
      PYTHON_VERSION: '3.8'
  maxParallel: 1

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PYTHON_VERSION)'
      architecture: 'x64'

  - task: DownloadSecureFile@1
    displayName: 'Download fcm_credentials.json'
    name: fcm_credentials
    inputs:
      secureFile: fcm_credentials.json

  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        # Python >= 3.5
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
  - script: |
      sudo apt -y install docker-compose
      python -m pip install --upgrade pip setuptools wheel
      pip install -r requirements.txt
      pip install unittest-xml-reporting
    displayName: 'Install prerequisites'

  - script: |
      pushd '$(projectRoot)'
      # Needed inside django
      export POSTGRES_HOST=localhost
      export POSTGRES_PASSWORD=$(PSQL_UT_UPASS)
      export POSTGRES_USER=$(PSQL_UT_UNAME)
      export POSTGRES_DB=$(PSQL_UT_DB)

      # Create PSQL user+pass and db for unittest
      docker-compose -f docker-compose-unittest.yml up -d db
      DOCKER_CONTAINER_NAME="unittest-db"

      # Wait untill the DB is running, timeout after 90s
      timeout 90s bash -c "until docker exec $DOCKER_CONTAINER_NAME pg_isready ; do sleep 0.1 ; done"

      # move fcm_credentials.json into source directory
      echo 'mv $(fcm_credentials.secureFilePath) .'
      mv $(fcm_credentials.secureFilePath) .
      ls -al

      # Run migrations for unittest
      POSTGRESS_USER=$(PSQL_UT_UNAME) POSTGRESS_PASSWORD=$(PSQL_UT_UPASS) POSTGRES_DB=${PSQL_UT_DB} bash -c 'python manage.py makemigrations'
      POSTGRESS_USER=$(PSQL_UT_UNAME) POSTGRESS_PASSWORD=$(PSQL_UT_UPASS) POSTGRES_DB=${PSQL_UT_DB} bash -c 'python manage.py makemigrations amsterdam_app_api'
      POSTGRESS_USER=$(PSQL_UT_UNAME) POSTGRESS_PASSWORD=$(PSQL_UT_UPASS) POSTGRES_DB=${PSQL_UT_DB} bash -c 'python manage.py migrate'

      # Start unittest
      POSTGRESS_USER=$(PSQL_UT_UNAME) POSTGRESS_PASSWORD=$(PSQL_UT_UPASS) POSTGRES_DB=${PSQL_UT_DB} bash -c 'python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input'
    displayName: 'Run tests'

  - script: |
     PGPASSWORD=$(PSQL_UT_APASS) psql -h $(PSQL_UT_HOST) -U $(PSQL_UT_ANAME) -c "DROP DB $(PSQL_UT_DB)';"

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
      testRunTitle: 'Python $(PYTHON_VERSION)'
    condition: succeededOrFailed()

variables:
  - group: Python Django Variables
  - name: lc.all
    value: 'en_US.UTF-8'
  - name: lang
    value: 'en_US.UTF-8'